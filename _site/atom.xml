<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Katie Leonard</title>
 <link href="http://katieleonard.ca/" rel="self"/>
 <link href="http://katieleonard.ca"/>
 <updated>2013-07-18T12:36:04-07:00</updated>
 <id>http://katieleonard.ca</id>
 <author>
   <name>Katie Leonard</name>
   <email>keighty.leonard@gmail.com</email>
 </author>

 
 <entry>
   <title>Get your kicks on route localhost:4567</title>
   <link href="http://katieleonard.ca/sinatra/2013/07/17/get-your-kicks-on-localhost4567"/>
   <updated>2013-07-17T00:00:00-07:00</updated>
   <id>http://katieleonard.ca/sinatra/2013/07/17/get-your-kicks-on-localhost4567</id>
   <content type="html">&lt;h2 id=&#39;i_learned_something_about_sinatra_today&#39;&gt;I learned something about Sinatra today.&lt;/h2&gt;

&lt;p&gt;A route has three ingredients: an HTTP method, a URL matching pattern, and a code block. Typically they look like this:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ruby&#39;&gt;&lt;span class=&#39;n&#39;&gt;get&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;do&lt;/span&gt;
  &lt;span class=&#39;s2&#39;&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But they can also look like this:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ruby&#39;&gt;&lt;span class=&#39;n&#39;&gt;post&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;/game/:guess&amp;#39;&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;do&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;game&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;guess&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;params&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;ss&#39;&gt;:guess&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
&lt;span class=&#39;kp&#39;&gt;private&lt;/span&gt;
  &lt;span class=&#39;k&#39;&gt;def&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;game&lt;/span&gt;
    &lt;span class=&#39;vi&#39;&gt;@game&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;||=&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;Mastermind&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;ss&#39;&gt;:Game&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;new_with_code&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;params&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;ss&#39;&gt;:code&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
  &lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code block returns information. That information can be anything, from a plain string (first example), or an html web page, to a JSON representation of an object (second example). What the browser does with the information it receives is the browser&amp;#8217;s business.&lt;/p&gt;

&lt;h2 id=&#39;i_learned_something_about_ajax_today&#39;&gt;I learned something about Ajax today.&lt;/h2&gt;

&lt;p&gt;An ajax call is built up from a few minimum parameters: a url, the HTTP method, the dataType expected, and a callback function that handles the return. You can include data from the user in the form of a data hash:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;javascript&#39;&gt;&lt;span class=&#39;lineno&#39;&gt; 1&lt;/span&gt; &lt;span class=&#39;kd&#39;&gt;var&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;the_url&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s2&#39;&gt;&amp;quot;http://&amp;quot;&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;window&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;location&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;host&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt; &lt;span class=&#39;s2&#39;&gt;&amp;quot;/game/&amp;quot;&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;guess_string&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;lineno&#39;&gt; 2&lt;/span&gt;   &lt;span class=&#39;kd&#39;&gt;var&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;mark_string&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;ajax&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;({&lt;/span&gt;
&lt;span class=&#39;lineno&#39;&gt; 3&lt;/span&gt;     &lt;span class=&#39;nx&#39;&gt;type&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;s2&#39;&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;
&lt;span class=&#39;lineno&#39;&gt; 4&lt;/span&gt;     &lt;span class=&#39;nx&#39;&gt;url&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;the_url&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;
&lt;span class=&#39;lineno&#39;&gt; 5&lt;/span&gt;     &lt;span class=&#39;nx&#39;&gt;accepts&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;s2&#39;&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;
&lt;span class=&#39;lineno&#39;&gt; 6&lt;/span&gt;     &lt;span class=&#39;nx&#39;&gt;dataType&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;s2&#39;&gt;&amp;quot;json&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;
&lt;span class=&#39;lineno&#39;&gt; 7&lt;/span&gt;     &lt;span class=&#39;nx&#39;&gt;data&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;code&amp;#39;&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;secret_code&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;},&lt;/span&gt;
&lt;span class=&#39;lineno&#39;&gt; 8&lt;/span&gt;     &lt;span class=&#39;nx&#39;&gt;complete&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;kd&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;data&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
&lt;span class=&#39;lineno&#39;&gt; 9&lt;/span&gt;       &lt;span class=&#39;nx&#39;&gt;output_mark&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;data&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;s1&#39;&gt;&amp;#39;responseText&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
&lt;span class=&#39;lineno&#39;&gt;10&lt;/span&gt;       &lt;span class=&#39;nx&#39;&gt;process_output&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;secret_code&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;guess_string&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;output_mark&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;span class=&#39;lineno&#39;&gt;11&lt;/span&gt;     &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;span class=&#39;lineno&#39;&gt;12&lt;/span&gt;   &lt;span class=&#39;p&#39;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code snippet is using Ajax to send the secret code and guess to the Sinatra route . The route does its magic, and returns a json containing the result.&lt;/p&gt;

&lt;p&gt;The overall workflow:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The url on my local machine looks like this: &amp;#8220;http://localhost:4567/game/12345&amp;#8221; (line 1). The submitted guess is 12345.&lt;/li&gt;

&lt;li&gt;Ajax packages the url with the data hash containing the secret code (line 7).&lt;/li&gt;

&lt;li&gt;Javascript submits the HTTP POST request to Sinatra which matches the route.&lt;/li&gt;

&lt;li&gt;The route creates a Mastermind::Game object with the provided secret code.&lt;/li&gt;

&lt;li&gt;The route calls the guess method on the Game object with the submitted guess.&lt;/li&gt;

&lt;li&gt;The route returns a json of the method output (in this case it is a string of +/- characters indicating exact number matches(+) or matched numbers in the wrong position(-)).&lt;/li&gt;

&lt;li&gt;In the ajax callback function the data from the json object is parsed and passed on for further processing.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#39;i_learned_something_about_routes_today&#39;&gt;I learned something about routes today.&lt;/h2&gt;

&lt;p&gt;I had a mental block about routes. I thought that building the &amp;#8220;/game/:guess&amp;#8221; route in Sinatra meant that the user would be constantly navigating between &amp;#8220;/mastermind&amp;#8221; and &amp;#8220;/game/:guess&amp;#8221;, and that the game would always be reloading with a new secret. I was thinking about routes the wrong way &amp;#8211; when javascript calls the route, it doesn&amp;#8217;t reload the page, it just retrieves data! I had conflated routes with navigation in my imagination, and forgot that a route is just a method call containing a request for information. Just because the information returned is often rendered as an html page doesn&amp;#8217;t mean that it has to be html. Which leads me to the penultimate point&amp;#8230;&lt;/p&gt;

&lt;h2 id=&#39;i_learned_something_about_curl_today&#39;&gt;I learned something about curl today.&lt;/h2&gt;

&lt;p&gt;ANYTHING can make an HTTP request. Ok, maybe that is a slight overstatement.&lt;/p&gt;

&lt;p&gt;Browsers interpret the information retrieved using HTTP requests, but they are far from the only category of software that can. Turns out, the command-line functions just as well:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;bash&#39;&gt;&lt;span class=&#39;lineno&#39;&gt;1&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;$ &lt;/span&gt;curl -X POST -H &lt;span class=&#39;s2&#39;&gt;&amp;quot;Accept: application/json&amp;quot;&lt;/span&gt; -d &lt;span class=&#39;s2&#39;&gt;&amp;quot;code=12345&amp;quot;&lt;/span&gt; js-games.herokuapp.com/12345
&lt;span class=&#39;lineno&#39;&gt;2&lt;/span&gt; +++++&lt;span class=&#39;err&#39;&gt;$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The command on line 1 will return the same string I am retrieving with $.ajax in javascript (output on line2). Sure it is a fairly plain result &amp;#8211; it doesn&amp;#8217;t even include a new line character, for pity&amp;#8217;s sake &amp;#8211; but it does the job of making an HTTP request to a route and using the result.&lt;/p&gt;

&lt;h2 id=&#39;i_learned_something_about_myself_today&#39;&gt;I learned something about myself today.&lt;/h2&gt;

&lt;p&gt;I didn&amp;#8217;t even realize I was misunderstanding HTTP! It was one of those concepts I had already checked off my mental list of technologies to cover on my quest to become a web developer. This breakthrough has reminded me that reviewing the fundamentals in the context of learning new technologies will bring a deeper understanding of everything.&lt;/p&gt;

&lt;p&gt;Awesome&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Mass assignment X Gravity</title>
   <link href="http://katieleonard.ca/rails/2013/07/15/mass-assignment-x-gravity"/>
   <updated>2013-07-15T00:00:00-07:00</updated>
   <id>http://katieleonard.ca/rails/2013/07/15/mass-assignment-x-gravity</id>
   <content type="html">&lt;h1 id=&#39;what_is_mass_assignment&#39;&gt;What is Mass Assignment?&lt;/h1&gt;

&lt;p&gt;Mass assignment is using a ruby-esque shortcut to interact with models:&lt;/p&gt;

&lt;p&gt;This is NOT mass assignment.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ruby&#39;&gt;&lt;span class=&#39;k&#39;&gt;def&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;create&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;u&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;no&#39;&gt;User&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;new&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;u&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;first_name&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;params&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;ss&#39;&gt;:user&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;][&lt;/span&gt;&lt;span class=&#39;ss&#39;&gt;:firstname&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;u&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;last_name&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;params&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;ss&#39;&gt;:user&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;][&lt;/span&gt;&lt;span class=&#39;ss&#39;&gt;:lastname&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;
  &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;u&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;save&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;redirect_to&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;:index&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;flash&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;success&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;s2&#39;&gt;&amp;quot;Created!&amp;quot;&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
  &lt;span class=&#39;k&#39;&gt;else&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;render&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;:action&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;new&amp;#39;&lt;/span&gt;
  &lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each param is extracted from the params hash and assigned explicitly. Any params that are not assigned are thrown on the floor.&lt;/p&gt;

&lt;p&gt;This IS mass assignment.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ruby&#39;&gt;&lt;span class=&#39;k&#39;&gt;def&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;create&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;u&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;no&#39;&gt;User&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;new&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;params&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;ss&#39;&gt;:user&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
  &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;u&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;save&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;redirect_to&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;:index&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;flash&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;success&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;s2&#39;&gt;&amp;quot;Created!&amp;quot;&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
  &lt;span class=&#39;k&#39;&gt;else&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;render&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;:action&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;new&amp;#39;&lt;/span&gt;
  &lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The programmer assumes that the params include all the data necessary, and &lt;em&gt;only&lt;/em&gt; the data necessary. All params in the hash are used to create the new user record.&lt;/p&gt;

&lt;h3 id=&#39;why_is_mass_assignment_a_problem&#39;&gt;Why is mass assignment a problem?&lt;/h3&gt;

&lt;p&gt;The problem with mass assignment is that if you have a sensitive tag in your model, for example user_type (which could be set to admin), a malicious user can add &lt;code&gt;user[:user_type] = &amp;#39;admin&amp;#39;&lt;/code&gt; to your params hash. Your controller will unwittingly include it in the save command, creating a new admin account for the malicious user.&lt;/p&gt;

&lt;h3 id=&#39;is_there_any_way_to_prevent_this_diabolical_schema_scheme&#39;&gt;Is there any way to prevent this diabolical schema scheme?&lt;/h3&gt;

&lt;p&gt;There is! With Rails 4 comes &lt;strong&gt;strong params&lt;/strong&gt;. Strong params live in the controller and tell it explicitly what params can be trusted.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ruby&#39;&gt;&lt;span class=&#39;k&#39;&gt;def&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;create&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;u&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;no&#39;&gt;User&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;new&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;user_params&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
  &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;u&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;save&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;redirect_to&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;:index&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;flash&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;success&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;s2&#39;&gt;&amp;quot;Created!&amp;quot;&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
  &lt;span class=&#39;k&#39;&gt;else&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;render&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;:action&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;new&amp;#39;&lt;/span&gt;
  &lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;def&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;user_params&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;params&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;require&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;ss&#39;&gt;:user&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;permit&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;ss&#39;&gt;:name&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;:email&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;:password&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;:password_confirmation&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The only parameters our controller will send to the model are those specified on our white-list. If rails detects a user attempting to access a param that is not on the white-list, said user had better be prepared for &lt;em&gt;grave consequences&lt;/em&gt;. Their session will be &lt;strong&gt;deleted&lt;/strong&gt;, their attempt will be &lt;strong&gt;logged&lt;/strong&gt;, and Rails will email their mother.&lt;/p&gt;

&lt;p&gt;Awesome.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>A Flash of Understanding</title>
   <link href="http://katieleonard.ca/rails/2013/07/13/a-flash-of-understanding"/>
   <updated>2013-07-13T00:00:00-07:00</updated>
   <id>http://katieleonard.ca/rails/2013/07/13/a-flash-of-understanding</id>
   <content type="html">&lt;p&gt;My page wouldn&amp;#8217;t flash the user.&lt;/p&gt;

&lt;p&gt;Trundling along the &lt;a href=&#39;http://ruby.railstutorial.org/chapters/updating-showing-and-deleting-users?version=4.0#top&#39;&gt;Hartl railstutorial&lt;/a&gt;, I needed to write some logic to allow a user to update their information.&lt;/p&gt;

&lt;p&gt;As a &lt;a href=&#39;http://www.katieleonard.ca/tdd/testing/2013/06/14/TDD-is-the-way-to-be/&#39;&gt;loyal TDD-er&lt;/a&gt;, I wrote a test to check that users see a success message if they are able to update their infomation:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ruby&#39;&gt;&lt;span class=&#39;n&#39;&gt;describe&lt;/span&gt; &lt;span class=&#39;s2&#39;&gt;&amp;quot;updating with valid information&amp;quot;&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;do&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;let&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;ss&#39;&gt;:new_name&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt; &lt;span class=&#39;s2&#39;&gt;&amp;quot;New Name&amp;quot;&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;let&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;ss&#39;&gt;:new_email&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt; &lt;span class=&#39;s2&#39;&gt;&amp;quot;new@example.com&amp;quot;&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;before&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;do&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;fill_in&lt;/span&gt; &lt;span class=&#39;s2&#39;&gt;&amp;quot;Name&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;with&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;new_name&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;fill_in&lt;/span&gt; &lt;span class=&#39;s2&#39;&gt;&amp;quot;Email&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;with&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;new_email&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;fill_in&lt;/span&gt; &lt;span class=&#39;s2&#39;&gt;&amp;quot;Password&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;with&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;user&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;password&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;fill_in&lt;/span&gt; &lt;span class=&#39;s2&#39;&gt;&amp;quot;Confirm Password&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;with&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;user&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;password&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;click_button&lt;/span&gt; &lt;span class=&#39;s2&#39;&gt;&amp;quot;Save changes&amp;quot;&lt;/span&gt;
  &lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;it&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;should&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;have_selector&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s1&#39;&gt;&amp;#39;div.alert.alert-success&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As expected, the tests should fail until I am able to log in.&lt;/p&gt;

&lt;p&gt;Since the Rails4 user scaffold comes with some nifty built in methods, I thought it would be easy to adapt them for my own ends:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ruby&#39;&gt;&lt;span class=&#39;c1&#39;&gt;# PATCH/PUT /users/1&lt;/span&gt;
&lt;span class=&#39;c1&#39;&gt;# PATCH/PUT /users/1.json&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;def&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;update&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;respond_to&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;do&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;|&lt;/span&gt;&lt;span class=&#39;nb&#39;&gt;format&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;|&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;vi&#39;&gt;@user&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;update&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;user_params&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
      &lt;span class=&#39;nb&#39;&gt;format&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;html&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;redirect_to&lt;/span&gt; &lt;span class=&#39;vi&#39;&gt;@user&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;notice&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;Profile updated.&amp;#39;&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
      &lt;span class=&#39;nb&#39;&gt;format&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;json&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;head&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;:no_content&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;else&lt;/span&gt;
      &lt;span class=&#39;nb&#39;&gt;format&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;html&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;render&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;action&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;edit&amp;#39;&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
      &lt;span class=&#39;nb&#39;&gt;format&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;json&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;render&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;json&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;vi&#39;&gt;@user&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;errors&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;status&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;:unprocessable_entity&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
  &lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I modify the line 5 of the user controller to change the &amp;#8220;notice&amp;#8221; message to a &amp;#8220;success&amp;#8221; message:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ruby&#39;&gt;&lt;span class=&#39;nb&#39;&gt;format&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;html&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;redirect_to&lt;/span&gt; &lt;span class=&#39;vi&#39;&gt;@user&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;success&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;s2&#39;&gt;&amp;quot;Profile updated&amp;quot;&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Seems reasonable, but my test for the flash message is still failing. Why won&amp;#8217;t my page flash the user?!&lt;/p&gt;

&lt;p&gt;Quick as a flash, I asked &lt;a href=&#39;https://itunes.apple.com/us/app/dash-docs-snippets/id458034879?mt=12&#39;&gt;Dash&lt;/a&gt; about FlashHash.&lt;/p&gt;

&lt;p&gt;Lo, and behold! Notice and alert are built-in flash tags, but success is nowhere to be found. How can I express the satisfaction of &lt;code&gt;SUCCESS!!&lt;/code&gt; with a tag as mundane as notice:?&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&#39;http://en.wikipedia.org/wiki/Duck_typing&#39;&gt;duck-typing&lt;/a&gt; (if it walks like a duck and quacks like a duck, it is probably a hash.. right?) we can add our spiffy &lt;code&gt;success:&lt;/code&gt; tag to flash, and share the appropriate level of enthusiasm with our users:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ruby&#39;&gt;&lt;span class=&#39;nb&#39;&gt;format&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;html&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;redirect_to&lt;/span&gt; &lt;span class=&#39;vi&#39;&gt;@user&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;flash&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;success&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;s2&#39;&gt;&amp;quot;Profile updated&amp;quot;&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;All tests are green, and today I learned that flash is&lt;/p&gt;

&lt;p&gt;Awesome&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Best Practices - Pull Requests</title>
   <link href="http://katieleonard.ca/git/2013/07/11/best-practices-pull-requests"/>
   <updated>2013-07-11T00:00:00-07:00</updated>
   <id>http://katieleonard.ca/git/2013/07/11/best-practices-pull-requests</id>
   <content type="html">&lt;p&gt;Learning how to contribute to open source projects has been really exciting. Adding value to existing projects, getting social in the coding community, and working on production-level code has been a steep but rewarding learning curve. One important thing to learn is the etiquette of creating pull requests. I read a great post about what to include in a &lt;a href=&#39;http://dev.solita.fi/2013/07/04/whats-in-a-good-commit.html&#39;&gt;good commit&lt;/a&gt;, but I also needed to know how to make a good pull request:&lt;/p&gt;

&lt;h3 id=&#39;branch_it&#39;&gt;Branch it&lt;/h3&gt;

&lt;p&gt;Before making any changes to an open source project, open a new branch. This will allow you to isolate your changes into separate pull requests. For example, I add Feature A, push to master, and create pull request 1. The next day, I add Feature B, push to master, and create pull request 2. If Feature A has not already been reviewed and accepted, Feature B additions will now be encorporated into pull request 1. This is bad practice. Keep each contribution in a separate branch. This will also allow you to keep your current branch up to date with the upstream repository, without affecting your previous work.&lt;/p&gt;

&lt;h3 id=&#39;one_change_one_commit&#39;&gt;One change, one commit&lt;/h3&gt;

&lt;p&gt;A commit is not just a backup. Like a migration, your commit history should read like a road map of changes you make to get to your current state &amp;#8211; and changes you should undo when things go wrong. If your commits change dozens of lines of code, understanding the changes is going to require a deep dive into the code.&lt;/p&gt;

&lt;h3 id=&#39;pithy_commit_messages&#39;&gt;Pithy commit messages&lt;/h3&gt;

&lt;p&gt;Make it easy on your code reviewer by making your commits small enough, and your commit messages detailed enough that they can be understood at a glance.&lt;/p&gt;

&lt;p&gt;The workflow, in general:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;fork the repo&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;git clone&lt;/code&gt; to local machine&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;git checkout -b featureA&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;git pull upstream master&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;make your changes&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;git commit -am &quot;adds one addition to feature A&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;git push origin featureA&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;make pull request&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Awesome&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Partial to Sinatra</title>
   <link href="http://katieleonard.ca/sinatra/2013/07/09/partial-to-sinatra"/>
   <updated>2013-07-09T00:00:00-07:00</updated>
   <id>http://katieleonard.ca/sinatra/2013/07/09/partial-to-sinatra</id>
   <content type="html">&lt;p&gt;Having just discovered the magic of using partials to refactor html in rails, imagine my delight when I found it to be even easier in Sinatra.&lt;/p&gt;

&lt;p&gt;A partial is a just a fragment of html (or erb). They can be used for rendering duplicate or dynamic content into otherwise static pages.&lt;/p&gt;

&lt;p&gt;I was writing html for my JSGames sinatra application when I caught myself copying a snippet of html onto my clipboard. Why on earth would I duplicate code? I want to include a block of text on both the index and the game page, but I don&amp;#8217;t want to have to modify it in two places when I inevitably get around to rewriting it.&lt;/p&gt;

&lt;p&gt;The solution?&lt;/p&gt;

&lt;p&gt;Factor out the duplicate html into a partial (begin name with _ for identification purposes). For example &lt;code&gt;_gameDescription.erb&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;html&#39;&gt;&lt;span class=&#39;nt&#39;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Game Title&lt;span class=&#39;nt&#39;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&#39;nt&#39;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Game description&lt;span class=&#39;nt&#39;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add that partial wherever you want to display this snippet of code:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ruby&#39;&gt;&lt;span class=&#39;o&#39;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;erb&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;:_gameDescription&lt;/span&gt;  &lt;span class=&#39;o&#39;&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ruby&#39;&gt;&lt;span class=&#39;o&#39;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;div&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;class&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;&lt;span class=&#39;s2&#39;&gt;&amp;quot;span4 pagination-centered&amp;quot;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#39;o&#39;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#39;sx&#39;&gt;%= erb :_solitaireDesc  %&amp;gt;&lt;/span&gt;
&lt;span class=&#39;sx&#39;&gt;  &amp;lt;a href=&lt;/span&gt;&lt;span class=&#39;s2&#39;&gt;&amp;quot;/game&amp;quot;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;class&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;&lt;span class=&#39;s2&#39;&gt;&amp;quot;btn btn-large&amp;quot;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#39;no&#39;&gt;Play&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#39;sr&#39;&gt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&#39;sr&#39;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;div&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Check out the final product on &lt;a href=&#39;http://js-games.herokuapp.com/solitaire&#39;&gt;JSGames&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Awesome&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Red, Green, Refactor! A Workflow for Rails</title>
   <link href="http://katieleonard.ca/rails/2013/07/03/red-green-refactor"/>
   <updated>2013-07-03T00:00:00-07:00</updated>
   <id>http://katieleonard.ca/rails/2013/07/03/red-green-refactor</id>
   <content type="html">&lt;h3 id=&#39;1_write_a_failing_test&#39;&gt;1. Write a failing test&lt;/h3&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ruby&#39;&gt;&lt;span class=&#39;n&#39;&gt;describe&lt;/span&gt; &lt;span class=&#39;s2&#39;&gt;&amp;quot;Static About page&amp;quot;&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;do&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;it&lt;/span&gt; &lt;span class=&#39;s2&#39;&gt;&amp;quot;should have the content &amp;#39;About Us&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;do&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;visit&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;/static_pages/about&amp;#39;&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;page&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;should&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;have_content&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s1&#39;&gt;&amp;#39;About Us&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
  &lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Use the failures to drive development:&lt;/p&gt;

&lt;h3 id=&#39;2_no_route&#39;&gt;2. No Route&lt;/h3&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;bash&#39;&gt;Failures:
  1&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; Static About page should have the content &lt;span class=&#39;s1&#39;&gt;&amp;#39;About Us&amp;#39;&lt;/span&gt;
     Failure/Error: visit &lt;span class=&#39;s1&#39;&gt;&amp;#39;/static_pages/about&amp;#39;&lt;/span&gt;
     ActionController::RoutingError:
       No route matches &lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;GET&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;s2&#39;&gt;&amp;quot;/static_pages/about&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add one to /config/routes.rb:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ruby&#39;&gt;&lt;span class=&#39;ss&#39;&gt;DemoApp2&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;ss&#39;&gt;:Application&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;routes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;draw&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;do&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;get&lt;/span&gt; &lt;span class=&#39;s2&#39;&gt;&amp;quot;static_pages/about&amp;quot;&lt;/span&gt;
  &lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#39;3no_controller&#39;&gt;3.No Controller&lt;/h3&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;bash&#39;&gt;Failures:

  1&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; Static About page should have the content &lt;span class=&#39;s1&#39;&gt;&amp;#39;About Us&amp;#39;&lt;/span&gt;
     Failure/Error: visit &lt;span class=&#39;s1&#39;&gt;&amp;#39;/static_pages/about&amp;#39;&lt;/span&gt;
     AbstractController::ActionNotFound:
       The action &lt;span class=&#39;s1&#39;&gt;&amp;#39;about&amp;#39;&lt;/span&gt; could not be found &lt;span class=&#39;k&#39;&gt;for &lt;/span&gt;StaticPagesController
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add one to /controllers/static_pages_controller.rb&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ruby&#39;&gt;&lt;span class=&#39;k&#39;&gt;class&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;StaticPagesController&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#39;no&#39;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&#39;k&#39;&gt;def&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;about&lt;/span&gt;
  &lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#39;4_no_page&#39;&gt;4. No Page&lt;/h3&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ruby&#39;&gt;&lt;span class=&#39;ss&#39;&gt;Failures&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;:&lt;/span&gt;
  &lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;no&#39;&gt;Static&lt;/span&gt; &lt;span class=&#39;no&#39;&gt;About&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;page&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;should&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;have&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;the&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;content&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;About Us&amp;#39;&lt;/span&gt;
     &lt;span class=&#39;no&#39;&gt;Failure&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;/&lt;/span&gt;&lt;span class=&#39;ss&#39;&gt;Error&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;visit&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;/static_pages/about&amp;#39;&lt;/span&gt;
     &lt;span class=&#39;ss&#39;&gt;ActionView&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;ss&#39;&gt;:MissingTemplate&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;:&lt;/span&gt;
       &lt;span class=&#39;no&#39;&gt;Missing&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;template&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;static_pages&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;/&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;about&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;application&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;/&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;about&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;with&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;&lt;span class=&#39;ss&#39;&gt;:locale&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;=&amp;gt;[&lt;/span&gt;&lt;span class=&#39;ss&#39;&gt;:en&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;:formats&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;=&amp;gt;[&lt;/span&gt;&lt;span class=&#39;ss&#39;&gt;:html&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;:handlers&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;=&amp;gt;[&lt;/span&gt;&lt;span class=&#39;ss&#39;&gt;:erb&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;:builder&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;:raw&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;:ruby&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;:jbuilder&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;:coffee&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add a view to /static_pages/about.html.erb&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;html&#39;&gt;&lt;span class=&#39;cp&#39;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
  &lt;span class=&#39;nt&#39;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&#39;nt&#39;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;About Us&lt;span class=&#39;nt&#39;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class=&#39;nt&#39;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&#39;nt&#39;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>No index.html, no cry</title>
   <link href="http://katieleonard.ca/rails4/2013/06/29/no-indexhtml-no-cry"/>
   <updated>2013-06-29T00:00:00-07:00</updated>
   <id>http://katieleonard.ca/rails4/2013/06/29/no-indexhtml-no-cry</id>
   <content type="html">&lt;p&gt;Following along with &lt;a href=&#39;http://www.amazon.com/Ruby-Rails-Tutorial-Addison-Wesley-Professional/dp/0321832051&#39;&gt;Rails tutorial&lt;/a&gt; by Michael Hartl, I built a sample app with a simple database, linking users to microposts in a twitter-like manner. Everything worked well locally, but when it came time to deploy on heroku, I ran across some interesting stumbling blocks:&lt;/p&gt;

&lt;h3 id=&#39;rails_4_does_not_come_with_a_default_indexhtml&#39;&gt;Rails 4 does not come with a default index.html&lt;/h3&gt;

&lt;p&gt;There I was, gleefully watching the slug compile on heroku (after several abortive attempts I realized I had not moved the sqlite3 gem into the development environment &amp;#8211; heroku doesn&amp;#8217;t like that). All seemed fine, I typed&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;java&#39;&gt;&lt;span class=&#39;n&#39;&gt;$&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;heroku&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;open&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and what greeted me? A 404 error page! Something has gone horribly wrong! I have been rejected by heroku! I try again from the beginning, ensuring I have followed all the steps.. what could I have missed? Same result. But, Mr. Hartl, said it was easy&amp;#8230; what was I missing?&lt;/p&gt;

&lt;p&gt;After some digging, I found a &lt;a href=&#39;https://devcenter.heroku.com/articles/rails4-getting-started&#39;&gt;heroku tutorial&lt;/a&gt; on getting started with the shiny new Rails 4. Deep inside this article, I found the magic words:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;Note: that Rails 4 no longer has a static index page in production, if you’re using a new app, there may be no root page.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Orly? Are you saying that the 404 error I was getting was actually generated by my properly deployed app? YES! I made some obvious change to the html&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;html&#39;&gt;&lt;span class=&#39;nt&#39;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;You made it!&lt;span class=&#39;nt&#39;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and redeployed. TADA!&lt;/p&gt;

&lt;p&gt;Awesome.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Hoisting with JavaScript</title>
   <link href="http://katieleonard.ca/javascript/2013/06/26/hoisting-with-javascript"/>
   <updated>2013-06-26T00:00:00-07:00</updated>
   <id>http://katieleonard.ca/javascript/2013/06/26/hoisting-with-javascript</id>
   <content type="html">&lt;p&gt;I am really enjoying &lt;a href=&#39;http://www.amazon.com/Test-Driven-JavaScript-Development-Developers-Library/dp/0321683919&#39;&gt;Test-Driven Development&lt;/a&gt; by Christian Johansen&lt;/p&gt;

&lt;p&gt;I picked up this little gem this morning as I was learning about functions and the various objects associated with them:&lt;/p&gt;

&lt;p&gt;You CANNOT use function declarations in conditionals. Take this example:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;java&#39;&gt;&lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;String&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;na&#39;&gt;prototype&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;na&#39;&gt;trim&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;{&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;function&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;trim&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;str&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;{&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;str&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;na&#39;&gt;trim&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;();&lt;/span&gt;
  &lt;span class=&#39;o&#39;&gt;}&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;else&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;{&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;function&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;trim&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;str&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;){&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;str&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;na&#39;&gt;replace&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(/^&lt;/span&gt;&lt;span class=&#39;err&#39;&gt;\&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;s&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;+|&lt;/span&gt;&lt;span class=&#39;err&#39;&gt;\&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;s&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;/&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;g&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;);&lt;/span&gt;
  &lt;span class=&#39;o&#39;&gt;}&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What is wrong with that, you might ask? HOISTING! Both functions are hoisted up to the global variable before execution, which means that the second one always overwrites the first one.&lt;/p&gt;

&lt;p&gt;This is a better method:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;java&#39;&gt;&lt;span class=&#39;k&#39;&gt;if&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(!&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;String&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;na&#39;&gt;prototype&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;na&#39;&gt;trim&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;{&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;String&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;na&#39;&gt;prototype&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;na&#39;&gt;trim&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;function&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;trim&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;()&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;{&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;this&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;na&#39;&gt;replace&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(/^&lt;/span&gt;&lt;span class=&#39;err&#39;&gt;\&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;s&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;+|&lt;/span&gt;&lt;span class=&#39;err&#39;&gt;\&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;s&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;/&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;g&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
  &lt;span class=&#39;o&#39;&gt;}&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This way, we are not overwriting any browser-available Trim methods, we are declaring the method on the String.prototype, which means it is available to ALL strings in scope, AND we have named it so that it will be more visible in a stack trace in case something goes wrong.&lt;/p&gt;

&lt;p&gt;AWESOME&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Javascript has spies</title>
   <link href="http://katieleonard.ca/2013/06/25/javascript-has-spies"/>
   <updated>2013-06-25T00:00:00-07:00</updated>
   <id>http://katieleonard.ca/2013/06/25/javascript-has-spies</id>
   <content type="html">&lt;h2 id=&#39;spies_vs_mocks_vs_stubs&#39;&gt;Spies vs Mocks vs Stubs?&lt;/h2&gt;

&lt;p&gt;We are covering testing frameworks at PCS this week, particularly Jasmine and Sinon.&lt;/p&gt;

&lt;p&gt;Jasmine has a similar structure to RSpec:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;java&#39;&gt;&lt;span class=&#39;n&#39;&gt;describe&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;Class to describe&amp;quot;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;()&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;{&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;it&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;should have some behavior&amp;quot;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;()&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;{&lt;/span&gt;
    &lt;span class=&#39;c1&#39;&gt;//assertions&lt;/span&gt;
  &lt;span class=&#39;o&#39;&gt;});&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Also similar to RSpec, Jasmine allows you to spy on behavior. Using spies, I can watch a method call and collect information about it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Want to know if it was called?&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;java&#39;&gt;&lt;span class=&#39;n&#39;&gt;expect&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;method&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;).&lt;/span&gt;&lt;span class=&#39;na&#39;&gt;toHaveBeenCalled&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Want to know how many times?&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;java&#39;&gt;&lt;span class=&#39;n&#39;&gt;expect&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;method&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;na&#39;&gt;callCount&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;).&lt;/span&gt;&lt;span class=&#39;na&#39;&gt;toEqual&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;3&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Want to know how it was called?&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;java&#39;&gt;&lt;span class=&#39;n&#39;&gt;expect&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;method&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;).&lt;/span&gt;&lt;span class=&#39;na&#39;&gt;toHaveBeenCalledWith&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;args&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;java&#39;&gt;&lt;span class=&#39;n&#39;&gt;describe&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;quot;Spy on methods&amp;quot;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;function&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;()&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;{&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;it&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;quot;should watch calls to console&amp;quot;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;function&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;()&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;{&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;var&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;mySpy&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;spyOn&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;console&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;quot;log&amp;quot;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;);&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;console&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;na&#39;&gt;log&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;test1&amp;quot;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;);&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;console&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;na&#39;&gt;log&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;test2&amp;quot;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;);&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;console&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;na&#39;&gt;log&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;test3&amp;quot;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;);&lt;/span&gt;

    &lt;span class=&#39;n&#39;&gt;expect&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;mySpy&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;na&#39;&gt;callCount&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;).&lt;/span&gt;&lt;span class=&#39;na&#39;&gt;toEqual&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;3&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;);&lt;/span&gt;
  &lt;span class=&#39;o&#39;&gt;});&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tomorrow, I conquer Stubs and Mocks!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>jQuery objects vs strings</title>
   <link href="http://katieleonard.ca/jquery/2013/06/19/jquery-objects-vs-strings"/>
   <updated>2013-06-19T00:00:00-07:00</updated>
   <id>http://katieleonard.ca/jquery/2013/06/19/jquery-objects-vs-strings</id>
   <content type="html">&lt;h2 id=&#39;object_blocker&#39;&gt;Object blocker!!&lt;/h2&gt;

&lt;p&gt;My pair was stuck for the longest time on the following code snip:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;javascript&#39;&gt;&lt;span class=&#39;nx&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kd&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(){&lt;/span&gt;
  &lt;span class=&#39;kd&#39;&gt;var&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;new_square&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;$(&amp;lt;div class=&amp;quot;square&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;)&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;

  &lt;span class=&#39;nx&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s1&#39;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;).&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;on&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s1&#39;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;&lt;span class=&#39;s1&#39;&gt;&amp;#39;.square&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kd&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(){&lt;/span&gt;
    &lt;span class=&#39;c1&#39;&gt;// var my_square = $(this);&lt;/span&gt;
    &lt;span class=&#39;nx&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;this&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;).&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;toggleClass&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s1&#39;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;

    &lt;span class=&#39;nx&#39;&gt;b&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;new_square&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
      &lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;insertAfter&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;this&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
    &lt;span class=&#39;nx&#39;&gt;a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;new_square&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
      &lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;insertBefore&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;this&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
    &lt;span class=&#39;nx&#39;&gt;b&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;toggleClass&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s1&#39;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
    &lt;span class=&#39;nx&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;toggleClass&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s1&#39;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
  &lt;span class=&#39;p&#39;&gt;});&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We expected out output to include three elements &amp;#8211; the original square, one inserted after, and one inserted before. The output we were seeing included only two squares: the original one and the square inserted before. If we inverted the insert calls, we would see only one inserted after. We were totally stumped until we printed out the content of new_square:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;javascript&#39;&gt; &lt;span class=&#39;nx&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s1&#39;&gt;&amp;#39;&amp;lt;div class=&amp;quot;square&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We were actually passing a reference to a jQuery OBJECT into the insert methods, so in essence, we were creating the object once and then passing it around to different locations. When we changed new_square from a jQuery object:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;javascript&#39;&gt; &lt;span class=&#39;kd&#39;&gt;var&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;new_square&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;$(&amp;lt;div class=&amp;quot;square&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;)&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to a string&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;javascript&#39;&gt; &lt;span class=&#39;kd&#39;&gt;var&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;new_square&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;&amp;lt;div class=&amp;quot;square&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We saw our third element appear no problem.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Namespaces and jQuery</title>
   <link href="http://katieleonard.ca/jquery/2013/06/18/solving-namespace-conflicts-with-jquery"/>
   <updated>2013-06-18T00:00:00-07:00</updated>
   <id>http://katieleonard.ca/jquery/2013/06/18/solving-namespace-conflicts-with-jquery</id>
   <content type="html">&lt;h3 id=&#39;namespaces_in_jquery_getting_you_down&#39;&gt;Namespaces in jQuery getting you down?&lt;/h3&gt;

&lt;p&gt;Chuck taught me a great trick today &amp;#8211; how to avoid namespace conflicts in jQuery:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;javascript&#39;&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kd&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;...&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;})(&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;jQuery&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This function is being passed jQuery as an argument, and is assigning it the local variable $ &amp;#8211; allowing you to use the $ and reference the jQuery library.&lt;/p&gt;

&lt;p&gt;Awesome.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Blogging with Jekyll Bootstrap</title>
   <link href="http://katieleonard.ca/2013/06/15/blogging-with-jekyll-bootstrap"/>
   <updated>2013-06-15T00:00:00-07:00</updated>
   <id>http://katieleonard.ca/2013/06/15/blogging-with-jekyll-bootstrap</id>
   <content type="html">&lt;p&gt;Building a portfolio has been a lot of fun and has required a couple of different technologies. A fellow PCS student has been blogging a long time, and he suggested using Jekyll in combination with github pages. What a fantastic gem! I found an even more awesome one at &lt;a href=&#39;http://jekyllbootstrap.com/&#39;&gt;jekyll-bootstrap&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now I am enjoying the power of bootstrap along with the ease of jekyll.&lt;/p&gt;

&lt;p&gt;To create a post&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ruby&#39;&gt;&lt;span class=&#39;err&#39;&gt;$&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;rake&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;post&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;title&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;&lt;span class=&#39;s2&#39;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To create a new page:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ruby&#39;&gt;&lt;span class=&#39;err&#39;&gt;$&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;rake&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;page&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;name&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;&lt;span class=&#39;s2&#39;&gt;&amp;quot;pages/about&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Couldn&amp;#8217;t be simpler for a beginning blogger.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>I admit it, I love TDD</title>
   <link href="http://katieleonard.ca/tdd/testing/2013/06/14/TDD-is-the-way-to-be"/>
   <updated>2013-06-14T00:00:00-07:00</updated>
   <id>http://katieleonard.ca/tdd/testing/2013/06/14/TDD-is-the-way-to-be</id>
   <content type="html">&lt;p&gt;This week @PDXcodeschool we jumped into TDD using minitest/autorun. I have used RSpec in the past, and loved the way it let me manage the logic of my project. I love that ruby has a built in framework &amp;#8211; so easy to use!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use specs to rough out project logic&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ruby&#39;&gt;&lt;span class=&#39;n&#39;&gt;describe&lt;/span&gt; &lt;span class=&#39;s2&#39;&gt;&amp;quot;Car&amp;quot;&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;do&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;it&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;should have a color&amp;#39;&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;it&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;should have a make&amp;#39;&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;it&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;should have a unique serial number&amp;#39;&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;it&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;should get a new serial number when it gets stolen&amp;#39;&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;it&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;should accept passengers&amp;#39;&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;it&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;should not accept more than 3 passengers&amp;#39;&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All of these tests will be skipped until they are followed by a do&amp;#8230;end block.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Take one test at a time and write the code to make it pass&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ruby&#39;&gt;&lt;span class=&#39;n&#39;&gt;describe&lt;/span&gt; &lt;span class=&#39;s2&#39;&gt;&amp;quot;Car&amp;quot;&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;do&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;it&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;should have a color&amp;#39;&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;do&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;car&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;no&#39;&gt;Car&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;new&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s2&#39;&gt;&amp;quot;black&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;car&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;color&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;must_equal&lt;/span&gt; &lt;span class=&#39;s2&#39;&gt;&amp;quot;black&amp;quot;&lt;/span&gt;
  &lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
  &lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If your tests exercise the project well enough, you end up with really tight code. More of a lasagna noodle than spaghetti!&lt;/p&gt;</content>
 </entry>
 
 
</feed>