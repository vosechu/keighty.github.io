<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Katie Leonard</title>
 <link href="http://katieleonard.ca/" rel="self"/>
 <link href="http://katieleonard.ca"/>
 <updated>2013-06-22T13:33:23-07:00</updated>
 <id>http://katieleonard.ca</id>
 <author>
   <name>Katie Leonard</name>
   <email>keighty.leonard@gmail.com</email>
 </author>

 
 <entry>
   <title>jQuery objects vs strings</title>
   <link href="http://katieleonard.ca/jquery/2013/06/19/jquery-objects-vs-strings"/>
   <updated>2013-06-19T00:00:00-07:00</updated>
   <id>http://katieleonard.ca/jquery/2013/06/19/jquery-objects-vs-strings</id>
   <content type="html">&lt;h2 id=&#39;object_blocker&#39;&gt;Object blocker!!&lt;/h2&gt;

&lt;p&gt;My pair was stuck for the longest time on the following code snip:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;javascript&#39;&gt;&lt;span class=&#39;nx&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kd&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(){&lt;/span&gt;
  &lt;span class=&#39;kd&#39;&gt;var&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;new_square&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;$(&amp;lt;div class=&amp;quot;square&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;)&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;

  &lt;span class=&#39;nx&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s1&#39;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;).&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;on&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s1&#39;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;&lt;span class=&#39;s1&#39;&gt;&amp;#39;.square&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kd&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(){&lt;/span&gt;
    &lt;span class=&#39;c1&#39;&gt;// var my_square = $(this);&lt;/span&gt;
    &lt;span class=&#39;nx&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;this&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;).&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;toggleClass&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s1&#39;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;

    &lt;span class=&#39;nx&#39;&gt;b&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;new_square&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
      &lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;insertAfter&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;this&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
    &lt;span class=&#39;nx&#39;&gt;a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;new_square&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
      &lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;insertBefore&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;this&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
    &lt;span class=&#39;nx&#39;&gt;b&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;toggleClass&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s1&#39;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
    &lt;span class=&#39;nx&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;toggleClass&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s1&#39;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
  &lt;span class=&#39;p&#39;&gt;});&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We expected out output to include three elements &amp;#8211; the original square, one inserted after, and one inserted before. The output we were seeing included only two squares: the original one and the square inserted before. If we inverted the insert calls, we would see only one inserted after. We were totally stumped until we printed out the content of new_square:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;javascript&#39;&gt; &lt;span class=&#39;nx&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s1&#39;&gt;&amp;#39;&amp;lt;div class=&amp;quot;square&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We were actually passing a reference to a jQuery OBJECT into the insert methods, so in essence, we were creating the object once and then passing it around to different locations. When we changed new_square from a jQuery object:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;javascript&#39;&gt; &lt;span class=&#39;kd&#39;&gt;var&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;new_square&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;$(&amp;lt;div class=&amp;quot;square&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;)&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to a string&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;javascript&#39;&gt; &lt;span class=&#39;kd&#39;&gt;var&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;new_square&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;&amp;lt;div class=&amp;quot;square&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We saw our third element appear no problem.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Namespaces and jQuery</title>
   <link href="http://katieleonard.ca/jquery/2013/06/18/solving-namespace-conflicts-with-jquery"/>
   <updated>2013-06-18T00:00:00-07:00</updated>
   <id>http://katieleonard.ca/jquery/2013/06/18/solving-namespace-conflicts-with-jquery</id>
   <content type="html">&lt;h3 id=&#39;namespaces_in_jquery_getting_you_down&#39;&gt;Namespaces in jQuery getting you down?&lt;/h3&gt;

&lt;p&gt;Chuck taught me a great trick today &amp;#8211; how to avoid namespace conflicts in jQuery:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;javascript&#39;&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kd&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;...&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;})(&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;jQuery&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This function is being passed jQuery as an argument, and is assigning it the local variable $ &amp;#8211; allowing you to use the $ and reference the jQuery library.&lt;/p&gt;

&lt;p&gt;Awesome.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Blogging with Jekyll Bootstrap</title>
   <link href="http://katieleonard.ca/2013/06/15/blogging-with-jekyll-bootstrap"/>
   <updated>2013-06-15T00:00:00-07:00</updated>
   <id>http://katieleonard.ca/2013/06/15/blogging-with-jekyll-bootstrap</id>
   <content type="html">&lt;p&gt;Building a portfolio has been a lot of fun and has required a couple of different technologies. A fellow PCS student has been blogging a long time, and he suggested using Jekyll in combination with github pages. What a fantastic gem! I found an even more awesome one at &lt;a href=&#39;http://jekyllbootstrap.com/&#39;&gt;jekyll-bootstrap&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now I am enjoying the power of bootstrap along with the ease of jekyll.&lt;/p&gt;

&lt;p&gt;To create a post&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ruby&#39;&gt;&lt;span class=&#39;err&#39;&gt;$&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;rake&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;post&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;title&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;&lt;span class=&#39;s2&#39;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To create a new page:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ruby&#39;&gt;&lt;span class=&#39;err&#39;&gt;$&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;rake&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;page&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;name&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;&lt;span class=&#39;s2&#39;&gt;&amp;quot;pages/about&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Couldn&amp;#8217;t be simpler for a beginning blogger.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>I admit it, I love TDD</title>
   <link href="http://katieleonard.ca/tdd/testing/2013/06/14/TDD-is-the-way-to-be"/>
   <updated>2013-06-14T00:00:00-07:00</updated>
   <id>http://katieleonard.ca/tdd/testing/2013/06/14/TDD-is-the-way-to-be</id>
   <content type="html">&lt;p&gt;This week @PDXcodeschool we jumped into TDD using minitest/autorun. I have used RSpec in the past, and loved the way it let me manage the logic of my project. I love that ruby has a built in framework &amp;#8211; so easy to use!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use specs to rough out project logic&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ruby&#39;&gt;&lt;span class=&#39;n&#39;&gt;describe&lt;/span&gt; &lt;span class=&#39;s2&#39;&gt;&amp;quot;Car&amp;quot;&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;do&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;it&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;should have a color&amp;#39;&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;it&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;should have a make&amp;#39;&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;it&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;should have a unique serial number&amp;#39;&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;it&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;should get a new serial number when it gets stolen&amp;#39;&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;it&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;should accept passengers&amp;#39;&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;it&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;should not accept more than 3 passengers&amp;#39;&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All of these tests will be skipped until they are followed by a do&amp;#8230;end block.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Take one test at a time and write the code to make it pass&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ruby&#39;&gt;&lt;span class=&#39;n&#39;&gt;describe&lt;/span&gt; &lt;span class=&#39;s2&#39;&gt;&amp;quot;Car&amp;quot;&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;do&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;it&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;should have a color&amp;#39;&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;do&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;car&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;no&#39;&gt;Car&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;new&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s2&#39;&gt;&amp;quot;black&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;car&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;color&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;must_equal&lt;/span&gt; &lt;span class=&#39;s2&#39;&gt;&amp;quot;black&amp;quot;&lt;/span&gt;
  &lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
  &lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If your tests exercise the project well enough, you end up with really tight code. More of a lasagna noodle than spaghetti!&lt;/p&gt;</content>
 </entry>
 
 
</feed>